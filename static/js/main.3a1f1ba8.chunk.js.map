{"version":3,"sources":["logo.svg","data/particles.js","Background.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","data_particles","particles","number","value","window","innerWidth","innerHeight","size","line_linked","enable","color","width","interactivity","events","onhover","mode","onclick","modes","push","particles_nb","grab","distance","opacity","Background","react_default","a","createElement","particles_default","className","params","config","Component","App","src_Background_0","src","logo","alt","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iFAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kSCAzBC,EAAA,CACXC,UAAa,CACTC,OAAU,CACNC,MAASC,OAAOC,WAAaD,OAAOE,YAAcF,OAAOC,WAAa,GAAKD,OAAOE,YAAc,IAEpGC,KAAQ,CACJJ,MAAS,GAEbK,YAAe,CACXC,QAAU,EACVC,MAAS,OACTC,MAAS,IAGjBC,cAAiB,CACbC,OAAU,CACNC,QAAW,CACPL,QAAU,EACVM,KAAQ,QAEZC,QAAW,CACPP,QAAU,EACVM,KAAQ,SAGhBE,MAAS,CACLC,KAAQ,CACJC,aAAgB,GAEpBC,KAAQ,CACJC,SAAY,IACZb,YAAe,CACXc,QAAW,OCfhBC,mLAPP,OACIC,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAWG,UAAU,YACjBC,OAAQC,WAJCC,aCkBVC,mLAjBP,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACO,EAAD,MACAT,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACXJ,EAAAC,EAAAC,cAAA,UAAQE,UAAU,cACdJ,EAAAC,EAAAC,cAAA,OAAKQ,IAAKC,IAAMP,UAAU,WAAWQ,IAAI,SACzCZ,EAAAC,EAAAC,cAAA,sCARNK,aCKEM,QACW,cAA7BjC,OAAOkC,SAASC,UAEe,UAA7BnC,OAAOkC,SAASC,UAEhBnC,OAAOkC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3a1f1ba8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export default {\n    \"particles\": {\n        \"number\": {\n            \"value\": window.innerWidth > window.innerHeight ? window.innerWidth / 30 : window.innerHeight / 30\n        },\n        \"size\": {\n            \"value\": 3\n        },\n        \"line_linked\": {\n            \"enable\": true,\n            \"color\": \"#fff\",\n            \"width\": 1\n        }\n    },\n    \"interactivity\": {\n        \"events\": {\n            \"onhover\": {\n                \"enable\": true,\n                \"mode\": \"grab\"\n            },\n            \"onclick\": {\n                \"enable\": true,\n                \"mode\": \"push\"\n            }\n        },\n        \"modes\": {\n            \"push\": {\n                \"particles_nb\": 5\n            },\n            \"grab\": {\n                \"distance\": 300,\n                \"line_linked\": {\n                    \"opacity\": 1\n                }\n            }\n        }\n    }\n}\n","import React, {\n    Component\n} from 'react';\nimport './Background.scss';\n\nimport Particles from 'react-particles-js';\nimport config from './data/particles.js';\n\nclass Background extends Component {\n    render() {\n        return (\n            <Particles className=\"particles\"\n                params={config} />\n        );\n    }\n}\n\nexport default Background;\n","import React, {\n    Component\n} from 'react';\nimport logo from './logo.svg';\nimport './App.scss';\nimport Background from './Background';\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Background />\n                <div className=\"App\">\n                    <header className=\"App-header\">\n                        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                        <p>\n                            Sample gh-page.\n                        </p>\n                    </header>\n                </div>\n            </div>\n\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}